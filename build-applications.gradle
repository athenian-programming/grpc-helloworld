plugins {
    id 'idea'
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.9.2'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
    id "com.github.ben-manes.versions" version '0.46.0'
}

group 'org.athenian'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    google()
    mavenCentral()
    maven { url = "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:$coroutines_version"

    implementation "io.grpc:grpc-netty-shaded:${grpc_version}"
    implementation "io.grpc:grpc-protobuf:${grpc_version}"
    implementation "io.grpc:grpc-stub:${grpc_version}"
    implementation "io.grpc:grpc-services:${grpc_version}"

    compileOnly "javax.annotation:javax.annotation-api:${annotation_version}"

    testImplementation "io.grpc:grpc-testing:${grpc_version}"
    testImplementation "org.mockito:mockito-core:3.3.1"

    testImplementation "junit:junit:${junit_version}"
}

//// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
//sourceSets {
//    main {
//        java {
//            srcDirs 'src/main/java'
//            srcDirs 'src/main/kotlin'
//            srcDirs 'build/generated/source/proto/main/grpc'
//            srcDirs 'build/generated/source/proto/main/java'
//            srcDirs 'build/generated/source/proto/main/client'
//        }
//    }
//}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protoc_version}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpc_version}" }

        // Specify protoc to generate using our grpc kotlin plugin
        grpckt { artifact = "io.grpc:protoc-gen-grpc-kotlin:${gengrpc_version}" }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                // Generate Java gRPC classes
                grpc {}
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt {}
            }
        }
    }
}

compileKotlin.dependsOn ':generateProto'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xinline-classes',
                            '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }
}

// Script tasks
startScripts.enabled = false

task java_server(type: CreateStartScripts) {
    mainClassName = 'org.athenian.java_helloworld.HelloWorldServer'
    applicationName = 'java-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task java_client(type: CreateStartScripts) {
    mainClassName = 'org.athenian.java_helloworld.HelloWorldClient'
    applicationName = 'java-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task kotlin_server(type: CreateStartScripts) {
    mainClassName = 'org.athenian.kotlin_helloworld.HelloWorldServer'
    applicationName = 'kotlin-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task kotlin_client(type: CreateStartScripts) {
    mainClassName = 'org.athenian.kotlin_helloworld.HelloWorldClientCR'
    applicationName = 'kotlin-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(java_server)
    from(java_client)
    from(kotlin_server)
    from(kotlin_client)
    fileMode = 0755
}