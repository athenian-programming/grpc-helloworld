plugins {
    id 'idea'
    id 'java'
    id 'com.google.protobuf' version '0.8.12'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    // Provides support for scripts
    id 'application'
    // From https://github.com/ben-manes/gradle-versions-plugin
    id "com.github.ben-manes.versions" version "0.28.0"
}

group 'org.athenian'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    maven { url = "https://kotlin.bintray.com/kotlinx" }
    maven { // The google mirror is less flaky than mavenCentral()
        url = "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    jcenter()
    maven { url = "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:$coroutines_version"

    implementation "io.grpc:grpc-netty-shaded:${grpc_version}"
    implementation "io.grpc:grpc-protobuf:${grpc_version}"
    implementation "io.grpc:grpc-stub:${grpc_version}"
    implementation "io.grpc:grpc-services:${grpc_version}"

    compileOnly "javax.annotation:javax.annotation-api:${annotation_version}"

    implementation "io.opencensus:opencensus-impl:${opencensus_version}"
    implementation "io.opencensus:opencensus-contrib-grpc-metrics:${opencensus_version}"
    implementation "io.opencensus:opencensus-exporter-stats-prometheus:${opencensus_version}"
    implementation "io.prometheus:simpleclient_httpserver:${prometheus_version}"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobuf_version}"

    testImplementation "io.grpc:grpc-testing:${grpc_version}"
    testImplementation "org.mockito:mockito-core:3.3.1"

    testImplementation "junit:junit:${junit_version}"
    testCompile group: 'junit', name: 'junit', version: junit_version
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/client'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protoc_version}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpc_version}" }

        // Specify protoc to generate using our grpc kotlin plugin
        grpckt { artifact = "io.grpc:protoc-gen-grpc-kotlin:${gengrpc_version}" }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                // Generate Java gRPC classes
                grpc { }
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt { }
            }
        }
    }
}

compileKotlin.dependsOn ':generateProto'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xinline-classes',
                            '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }
}

// Script tasks
startScripts.enabled = false

task java_server(type: CreateStartScripts) {
    mainClassName = 'org.athenian.java_helloworld.HelloWorldServer'
    applicationName = 'java-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task java_client(type: CreateStartScripts) {
    mainClassName = 'org.athenian.java_helloworld.HelloWorldClient'
    applicationName = 'java-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task kotlin_server(type: CreateStartScripts) {
    mainClassName = 'org.athenian.kotlin_helloworld.HelloWorldServer'
    applicationName = 'kotlin-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task kotlin_client(type: CreateStartScripts) {
    mainClassName = 'org.athenian.kotlin_helloworld.HelloWorldClientCR'
    applicationName = 'kotlin-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(java_server)
    from(java_client)
    from(kotlin_server)
    from(kotlin_client)
    fileMode = 0755
}