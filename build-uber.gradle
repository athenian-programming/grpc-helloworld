plugins {
    id 'idea'
    id 'java'
    id 'com.google.protobuf' version '0.8.12'
    id 'org.jetbrains.kotlin.jvm' version '1.3.70'
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    // From https://github.com/ben-manes/gradle-versions-plugin
    id "com.github.ben-manes.versions" version "0.28.0"
}

group 'org.athenian'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    maven { url = "https://kotlin.bintray.com/kotlinx" }
    maven { // The google mirror is less flaky than mavenCentral()
        url = "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    jcenter()
    maven { url = "https://jitpack.io" }
}

def annotationVersion = "1.3.2"
def coroutinesVersion = '1.3.4'
def grpcVersion = '1.28.0'
def kgaxVersion = '0.6.0'
def opencensusVersion = "0.25.0"
def prometheusVersion = '0.8.1'
def protobufVersion = '3.11.4'
def protocVersion = '3.11.4'
def junitVersion = '4.13'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:$coroutinesVersion"

    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"

    implementation "com.github.googleapis.gax-kotlin:kgax-grpc:${kgaxVersion}"

    compileOnly "javax.annotation:javax.annotation-api:${annotationVersion}"

    implementation "io.opencensus:opencensus-impl:${opencensusVersion}"
    implementation "io.opencensus:opencensus-contrib-grpc-metrics:${opencensusVersion}"
    implementation "io.opencensus:opencensus-exporter-stats-prometheus:${opencensusVersion}"
    implementation "io.prometheus:simpleclient_httpserver:${prometheusVersion}"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "org.mockito:mockito-core:3.3.1"

    testImplementation "junit:junit:${junitVersion}"
    testCompile group: 'junit', name: 'junit', version: junitVersion
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/client'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }

        client { artifact = 'com.github.googleapis:gapic-generator-kotlin:master-SNAPSHOT:core@jar' }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }

        all().each { task ->
            task.plugins {
                client {}
            }
        }
    }
}

compileKotlin.dependsOn ':generateProto'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xinline-classes',
                            '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }
}

// Required for multiple uberjar targets
shadowJar {
    mergeServiceFiles()
}

// Uberjar tasks
task java_server(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'java-server.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.java_helloworld.HelloWorldServer')
    }
    from zipTree(shadowJar.archiveFile)
}

task java_client(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'java-client.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.java_helloworld.HelloWorldClient')
    }
    from zipTree(shadowJar.archiveFile)
}

task kotlin_server(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'kotlin-server.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.kotlin_helloworld.HelloWorldServer')
    }
    from zipTree(shadowJar.archiveFile)
}

task kotlin_client(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'kotlin-client.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.kotlin_helloworld.HelloWorldClientCR')
    }
    from zipTree(shadowJar.archiveFile)
}

