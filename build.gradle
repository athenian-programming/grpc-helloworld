plugins {
    id 'idea'
    //id 'application'
    id 'java'
    id 'com.google.protobuf' version '0.8.12'
    //id 'com.google.protobuf:protobuf-gradle-plugin' version '0.8.12'
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id "com.github.ben-manes.versions" version "0.38.0"
}

group 'org.athenian'
version '1.0-SNAPSHOT'

//def mainName = 'org.athenian.kotlin_helloworld.HelloWorldCR'
//def appName = 'helloworld'

sourceCompatibility = 1.8

repositories {
    maven { url = "https://kotlin.bintray.com/kotlinx" }
    maven { // The google mirror is less flaky than mavenCentral()
        url = "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    jcenter()
    maven { url = "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:$coroutines_version"

    implementation "io.grpc:grpc-netty-shaded:${grpc_version}"
    implementation "io.grpc:grpc-protobuf:${grpc_version}"
    implementation "io.grpc:grpc-stub:${grpc_version}"
    implementation "io.grpc:grpc-services:${grpc_version}"

    implementation "io.grpc:grpc-kotlin-stub:${gengrpc_version}"

    compileOnly "javax.annotation:javax.annotation-api:${annotation_version}"

    implementation "io.opencensus:opencensus-impl:${opencensus_version}"
    implementation "io.opencensus:opencensus-contrib-grpc-metrics:${opencensus_version}"
    implementation "io.opencensus:opencensus-exporter-stats-prometheus:${opencensus_version}"
    implementation "io.prometheus:simpleclient_httpserver:${prometheus_version}"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobuf_version}"

    implementation "io.github.microutils:kotlin-logging:${logging_version}"
    implementation "ch.qos.logback:logback-classic:${logback_version}"

    testImplementation "io.grpc:grpc-testing:${grpc_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"

    testImplementation "junit:junit:${junit_version}"
    testCompile group: 'junit', name: 'junit', version: junit_version
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/client'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protoc_version}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpc_version}" }

        // Specify protoc to generate using our grpc kotlin plugin
        grpckt { artifact = "io.grpc:protoc-gen-grpc-kotlin:${gengrpc_version}" }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                // Generate Java gRPC classes
                grpc { }
                // Generate Kotlin gRPC using the custom plugin from library
                grpckt { }
            }
        }
    }
}

compileKotlin.dependsOn ':generateProto'

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xinline-classes',
                            '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi']
    }
}

// Required for multiple uberjar targets
shadowJar {
    mergeServiceFiles()
}

// Uberjar tasks
task java_server(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'java-server.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.java_helloworld.HelloWorldServer')
    }
    from zipTree(shadowJar.archiveFile)
}

task java_client(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'java-client.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.java_helloworld.HelloWorldClient')
    }
    from zipTree(shadowJar.archiveFile)
}

task kotlin_server(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'kotlin-server.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.kotlin_helloworld.HelloWorldServerCR')
    }
    from zipTree(shadowJar.archiveFile)
}

task kotlin_client(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'kotlin-client.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.kotlin_helloworld.HelloWorldClientCR')
    }
    from zipTree(shadowJar.archiveFile)
}

//startScripts.dependsOn(otherStartScripts)

task(stage, dependsOn: "installDist")
