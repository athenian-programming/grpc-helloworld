plugins {
    id 'idea'
    //id 'application'
    id 'java'
    id 'com.google.protobuf' version '0.9.4'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group 'org.athenian'
version '1.0-SNAPSHOT'

//def mainName = 'org.athenian.kotlin_helloworld.HelloWorldCR'
//def appName = 'helloworld'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    google()
    mavenCentral()
    maven { url = "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$coroutines_version"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-debug:$coroutines_version"

    implementation "io.grpc:grpc-netty-shaded:$grpc_version"
    implementation "io.grpc:grpc-protobuf:$grpc_version"
    implementation "io.grpc:grpc-stub:$grpc_version"
    implementation "io.grpc:grpc-services:$grpc_version"

    implementation "io.grpc:grpc-kotlin-stub:$gengrpc_version"

    implementation "io.github.mscheong01:krotoDC-core:$krotodc_version"

    compileOnly "javax.annotation:javax.annotation-api:$annotation_version"

    implementation "io.github.microutils:kotlin-logging:$logging_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"

    testImplementation "io.grpc:grpc-testing:$grpc_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "junit:junit:$junit_version"
}

//// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
//sourceSets {
//    main {
//        java {
//            srcDirs 'src/main/java'
//            srcDirs 'src/main/kotlin'
//            srcDirs 'build/generated/source/proto/main/grpc'
//            srcDirs 'build/generated/source/proto/main/java'
//            srcDirs 'build/generated/source/proto/main/client'
//        }
//    }
//}

compileKotlin.dependsOn ':generateProto'

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protoc_version"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }

        // Specify protoc to generate using our grpc kotlin plugin
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:$gengrpc_version:jdk8@jar"
        }

        krotoDC {
            artifact = "io.github.mscheong01:protoc-gen-krotoDC:$krotodc_version:jdk8@jar"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}     // Generate Java gRPC classes
                grpckt {}   // Generate Kotlin gRPC using the custom plugin from library
                krotoDC {}  // Generate Kotlin data classes
            }
        }
    }
}

kotlin {
    jvmToolchain(17)
}

compileKotlin {
    kotlinOptions.freeCompilerArgs = ["-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
                                      "-opt-in=kotlinx.coroutines.InternalCoroutinesApi"]
}
compileTestKotlin {
}

// Required for multiple uberjar targets
shadowJar {
    mergeServiceFiles()
}

// Uberjar tasks
tasks.register('java_server', Jar) {
    dependsOn shadowJar
    archiveFileName = 'java-server.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.java_helloworld.HelloWorldServer')
    }
    from zipTree(shadowJar.archiveFile)
}

tasks.register('java_client', Jar) {
    dependsOn shadowJar
    archiveFileName = 'java-client.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.java_helloworld.HelloWorldClient')
    }
    from zipTree(shadowJar.archiveFile)
}

tasks.register('kotlin_server', Jar) {
    dependsOn shadowJar
    archiveFileName = 'kotlin-server.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.kotlin_helloworld.HelloWorldServerCR')
    }
    from zipTree(shadowJar.archiveFile)
}

tasks.register('kotlin_client', Jar) {
    dependsOn shadowJar
    archiveFileName = 'kotlin-client.jar'
    manifest {
        attributes('Main-Class': 'org.athenian.kotlin_helloworld.HelloWorldClientCR')
    }
    from zipTree(shadowJar.archiveFile)
}

//startScripts.dependsOn(otherStartScripts)

tasks.register('stage') { dependsOn "installDist" }
