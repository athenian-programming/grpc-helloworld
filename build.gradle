plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    id 'com.google.protobuf' version '0.8.8'
    id 'idea'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
    // From https://github.com/ben-manes/gradle-versions-plugin
    id "com.github.ben-manes.versions" version "0.20.0"
}

group 'org.athenian'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenLocal()
}

def grpcVersion = '1.19.0'
def protobufVersion = '3.6.1'
def protocVersion = '3.6.1'
def annotationVersion = "1.3.2"
def opencensusVersion = "0.19.2"
def prometheusVersion = '0.6.0'
def junitVersion = '4.12'
def kotlinVersion = plugins.findPlugin("org.jetbrains.kotlin.jvm").kotlinPluginVersion

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"

    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "javax.annotation:javax.annotation-api:${annotationVersion}"

    implementation "io.opencensus:opencensus-impl:${opencensusVersion}"
    implementation "io.opencensus:opencensus-contrib-grpc-metrics:${opencensusVersion}"
    implementation "io.opencensus:opencensus-exporter-stats-prometheus:${opencensusVersion}"
    implementation "io.prometheus:simpleclient_httpserver:${prometheusVersion}"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.mockito:mockito-core:1.9.5"

    testCompile group: 'junit', name: 'junit', version: junitVersion
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

compileKotlin.dependsOn ':generateProto'

startScripts.enabled = false

task java_helloWorldServer(type: CreateStartScripts) {
    mainClassName = 'org.athenian.java_helloworld.HelloWorldServer'
    applicationName = 'java-helloworld-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task java_helloWorldClient(type: CreateStartScripts) {
    mainClassName = 'org.athenian.java_helloworld.HelloWorldClient'
    applicationName = 'java-helloworld-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task kotlin_helloWorldServer(type: CreateStartScripts) {
    mainClassName = 'org.athenian.kotlin_helloworld.HelloWorldServer'
    applicationName = 'kotlin-helloworld-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task kotlin_helloWorldClient(type: CreateStartScripts) {
    mainClassName = 'org.athenian.kotlin_helloworld.HelloWorldClient'
    applicationName = 'kotlin-helloworld-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(java_helloWorldServer)
    from(java_helloWorldClient)
    from(kotlin_helloWorldServer)
    from(kotlin_helloWorldClient)
    fileMode = 0755
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
